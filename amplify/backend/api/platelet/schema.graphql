type Tenant
@auth(rules: [
{allow: private, operations: [read]},
])
@model {
  id: ID!
  name: String!
  referenceIdentifier: String!
  admin: User! @hasOne
}

type User
@auth(rules: [
  {allow: private, operations: [read]},
  {allow: owner, ownerField: "cognitoId", operations: [update]},
  {allow: groups, groups: ["ADMIN"], operations: [update]},
])
@model {
  id: ID!
  username: String!
  cognitoId: ID! @index(name: "byCognitoId", queryField: "getUserByCognitoId") @auth(rules: [{allow: private, operations: [read]}])
  tenantId: ID! @index(name: "byTenantId")
  isPrimaryAdmin: Int @default(value: "0")
  contact: AddressAndContactDetails
  displayName: String!
  name: String
  roles: [Role!]!
  dateOfBirth: AWSDate
  riderResponsibility: String @auth(rules: [
    {allow: private, operations: [read]},
    {allow: owner, ownerField: "cognitoId", operations: [update]},
    {allow: groups, groups: ["ADMIN", "COORDINATOR"], operations: [update]},
  ])
  possibleRiderResponsibilities: [PossibleRiderResponsibilities] @hasMany
  profilePictureURL(width: Int, height: Int): AWSURL @function(name: "plateletProfilePictureResolver-${env}") @auth(rules: [{allow: private, operations: [read]}])
  profilePicture: S3Object
  comments: [Comment] @hasMany
  assignments: [TaskAssignee] @hasMany
  vehicleAssignments: [VehicleAssignment] @hasMany
  createdTasks: [Task] @hasMany
  createdLocations: [Location] @hasMany
  createdVehicles: [Vehicle] @hasMany
  disabled: Int @default(value: "0")
}

type PossibleRiderResponsibilities
@auth(rules: [
  {allow: private, operations: [read]},
  {allow: groups, groups: ["ADMIN"], operations: [create, read, delete]},
])
@model {
  id: ID!
  tenantId: ID! @index(name: "byTenantId")
  user: User! @belongsTo
  riderResponsibility: RiderResponsibility! @belongsTo
}

type S3Object {
  bucket: String!
  key: String!
  region: String!
}

type Vehicle
@auth(rules: [
  {allow: private, operations: [read]},
  {allow: groups, groups: ["ADMIN"], operations: [create, read, update]},
])
@model {
  id: ID!
  tenantId: ID! @index(name: "byTenantId")
  createdBy: User @belongsTo
  name: String
  manufacturer: String
  model: String
  dateOfManufacture: AWSDate
  dateOfRegistration: AWSDate
  assignments: [VehicleAssignment] @hasMany
  comments: [Comment] @hasMany(indexName: "byParent", fields: ["id"])
  disabled: Int @default(value: "0")
}

type VehicleAssignment
@auth(rules: [
  {allow: private, operations: [read]},
  {allow: groups, groups: ["ADMIN", "COORDINATOR", "RIDER"], operations: [create, read, delete]},
])
@model {
  id: ID!
  tenantId: ID! @index(name: "byTenantId")
  vehicle: Vehicle! @belongsTo
  assignee: User! @belongsTo
}

type AddressAndContactDetails {
  name: String
  telephoneNumber: String
  mobileNumber: String
  emailAddress: String
  ward: String
  line1: String
  line2: String
  line3: String
  town: String
  county: String
  state: String
  country: String
  postcode: String
  what3words: String
}

type Location
@auth(rules: [
  {allow: private, operations: [read]},
  {allow: groups, groups: ["ADMIN", "COORDINATOR"], operations: [create, read, update]},
])
@model {
  id: ID!
  tenantId: ID! @index(name: "byTenantId")
  createdBy: User @belongsTo
  name: String
  listed: Int
  contact: AddressAndContactDetails
  ward: String
  line1: String
  line2: String
  line3: String
  town: String
  county: String
  state: String
  country: String
  postcode: String
  what3words: String
  tasksAsPickUp: [Task] @hasMany(indexName: "byPickUpLocation", fields: ["id"])
  tasksAsDropOff: [Task] @hasMany(indexName: "byDropOffLocation", fields: ["id"])
  taskAsEstablishment: [Task] @hasMany(indexName: "byEstasblishmentLocation", fields: ["id"])
  comments: [Comment] @hasMany(indexName: "byParent", fields: ["id"])
  disabled: Int @default(value: "0")
  googleMapsPlaceId: String
}

type Task
@auth(rules: [
  {allow: private, operations: [read]},
  {allow: groups, groups: ["COORDINATOR", "RIDER", "ADMIN"], operations: [create, read, update]},
])
@model {
  id: ID!
  tenantId: ID! @index(name: "byTenantId")
  createdBy: User @belongsTo
  dateCreated: AWSDate!
  timeOfCall: AWSDateTime
  timePickedUp: AWSDateTime
@auth(rules: [
  {allow: private, operations: [read]},
  {allow: groups, groups: ["COORDINATOR", "RIDER", "ADMIN"], operations: [create, read, update, delete]},
])
timePickedUpSenderName: String
@auth(rules: [
  {allow: private, operations: [read]},
  {allow: groups, groups: ["COORDINATOR", "RIDER", "ADMIN"], operations: [create, read, update, delete]},
])
  timeDroppedOff: AWSDateTime
@auth(rules: [
  {allow: private, operations: [read]},
  {allow: groups, groups: ["COORDINATOR", "RIDER", "ADMIN"], operations: [create, read, update, delete]},
])
  timeDroppedOffRecipientName: String
@auth(rules: [
  {allow: private, operations: [read]},
  {allow: groups, groups: ["COORDINATOR", "RIDER", "ADMIN"], operations: [create, read, update, delete]},
])
  timeCancelled: AWSDateTime
@auth(rules: [
  {allow: private, operations: [read]},
  {allow: groups, groups: ["COORDINATOR", "RIDER", "ADMIN"], operations: [create, read, update, delete]},
])
  timeRejected: AWSDateTime
@auth(rules: [
  {allow: private, operations: [read]},
  {allow: groups, groups: ["COORDINATOR", "RIDER", "ADMIN"], operations: [create, read, update, delete]},
])
  timeRiderHome: AWSDateTime
@auth(rules: [
  {allow: private, operations: [read]},
  {allow: groups, groups: ["COORDINATOR", "RIDER", "ADMIN"], operations: [create, read, update, delete]},
])
  requesterContact: AddressAndContactDetails
  pickUpLocationId: ID @index(name: "byPickUpLocation")
@auth(rules: [
  {allow: private, operations: [read]},
  {allow: groups, groups: ["COORDINATOR", "RIDER", "ADMIN"], operations: [create, read, update, delete]},
])
  dropOffLocationId: ID @index(name: "byDropOffLocation")
@auth(rules: [
  {allow: private, operations: [read]},
  {allow: groups, groups: ["COORDINATOR", "RIDER", "ADMIN"], operations: [create, read, update, delete]},
])
  establishmentLocationId: ID @index(name: "byEstasblishmentLocation")
  pickUpLocation: Location @belongsTo(fields: ["pickUpLocationId"])
  dropOffLocation: Location @belongsTo(fields: ["dropOffLocationId"])
  establishmentLocation: Location @belongsTo(fields: ["establishmentLocationId"])
  riderResponsibility: String
@auth(rules: [
  {allow: private, operations: [read]},
  {allow: groups, groups: ["COORDINATOR", "RIDER", "ADMIN"], operations: [create, read, update, delete]},
])
  assignees: [TaskAssignee] @hasMany
  priority: Priority
@auth(rules: [
  {allow: private, operations: [read]},
  {allow: groups, groups: ["COORDINATOR", "RIDER", "ADMIN"], operations: [create, read, update, delete]},
])
  deliverables: [Deliverable] @hasMany
  comments: [Comment] @hasMany(indexName: "byParent", fields: ["id"])
  status: TaskStatus @index(name: "byStatus", queryField: "tasksByStatus")
  isRiderUsingOwnVehicle: Int @default(value: "0")
}

type TaskAssignee
@auth(rules: [
  {allow: private, operations: [read]},
  {allow: groups, groups: ["COORDINATOR", "RIDER", "ADMIN"], operations: [create, read, delete]},
])
@model {
  id: ID!
  tenantId: ID! @index(name: "byTenantId")
  role: Role!
  task: Task! @belongsTo
  assignee: User! @belongsTo
}

type Comment
@auth(rules: [
  {allow: private, operations: [read]},
  {allow: owner, operations: [create, read, delete, update]},
  {allow: groups, groups: ["ADMIN"], operations: [create, read, delete, update]},
])
@model {
  id: ID!
  parentId: ID @index(name: "byParent")
  tenantId: ID! @index(name: "byTenantId")
  body: String
  author: User @belongsTo
  visibility: CommentVisibility
}

type DeliverableType
@auth(rules: [
  {allow: private, operations: [read]},
  {allow: groups, groups: ["ADMIN"], operations: [create, read, update]},
])
@model {
  id: ID!
  label: String!
  tenantId: ID! @index(name: "byTenantId")
  icon: DeliverableTypeIcon
  defaultUnit: DeliverableUnit
  deliverables: [Deliverable] @hasMany
  tags: [String]
  disabled: Int @default(value: "0")
}

type Deliverable
@auth(rules: [
  {allow: private, operations: [read]},
  {allow: groups, groups: ["ADMIN", "COORDINATOR", "RIDER"], operations: [create, read, delete, update]},
])
@model {
  id: ID!
  tenantId: ID! @index(name: "byTenantId")
  deliverableType: DeliverableType @belongsTo
  task: Task @belongsTo
  count: Int
  unit: DeliverableUnit
  orderInGrid: Int
  comments: [Comment] @hasMany(indexName: "byParent", fields: ["id"])
}

enum DeliverableTypeIcon {
  BUG
  CHILD
  DOCUMENT
  EQUIPMENT
  OTHER
}

type RiderResponsibility
@auth(rules: [
  {allow: private, operations: [read]},
  {allow: groups, groups: ["ADMIN"], operations: [create, read, update]},
])
@model {
  id: ID!
  tenantId: ID! @index(name: "byTenantId")
  label: String!
  disabled: Int @default(value: "0")
  possibleUsers: [PossibleRiderResponsibilities] @hasMany
}

enum TaskStatus {
  NEW
  ACTIVE
  PICKED_UP
  DROPPED_OFF
  CANCELLED
  REJECTED
  ABANDONED
  COMPLETED
}

enum Priority {
  HIGH
  MEDIUM
  LOW
}

enum DeliverableUnit {
  NONE
  LITER
  MILLILITER
  GRAM
  ITEM
  BOX
}

enum Role {
  USER
  COORDINATOR
  RIDER
  ADMIN
}

enum CommentVisibility {
  EVERYONE
  ME
}

type SendFeedback {
  successState: Boolean
}

type Mutation {
  registerUser(name: String, email: String, tenantId: ID, roles: [Role]): User @function(name: "plateletAdminAddNewUser-${env}") @auth(rules: [{allow: groups, groups: ["ADMIN"]}])
  registerTenant(name: String, emailAddress: String, tenantName: String): Tenant @function(name: "plateletAddNewTenant-${env}") @auth(rules: [{allow: groups, groups: ["SUPER"]}])
  updateUserRoles(userId: ID, roles: [Role]): User @function(name: "plateletAdminChangeUserRoles-${env}") @auth(rules: [{allow: groups, groups: ["ADMIN"]}])
}

type Statistics {
  numCancelled: Int
  numCompleted: Int
  numDroppedOff: Int
  numRejected: Int
  numAbandoned: Int
  numActive: Int
  numPickedUp: Int
  numNew: Int
  numTest: Int
}

type Query {
  profilePictureUploadURL(userId: ID!): AWSURL @function(name: "plateletProfilePictureUploadURLResolver-${env}") @auth(rules: [{allow: private}])
  getStatistics(tenantId: ID!): Statistics @function(name: "plateletGetStatistics-${env}") @auth(rules: [{allow: private}])
  sendUserFeedback(emailAddress: AWSEmail, body: String): SendFeedback @function(name: "plateletSendUserFeedback-${env}") @auth(rules: [{allow: private}])
}
 
